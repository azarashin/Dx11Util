//-----------------------------------------------------------------------
// File : AsModel.h
// Desc : Asura Model
// Copyright(c) Project Asura All right reserved.
//-----------------------------------------------------------------------

//-----------------------------------------------------------------------
// History
//-----------------------------------------------------------------------
// <---> 2010/11/13 [Pocol] 新規作成.
// <End>


#ifndef __ASURA_MODEL_H__
#define __ASURA_MODEL_H__

//-----------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------
#include "AsDef.h"
#include "AsMath.h"
#include <vector>

namespace Asura {
namespace Graphics {

//------------------------------------------------------------------------
// Type definitions
//------------------------------------------------------------------------

/////////////////////////////////////////////////////////////////////////
// UShort4 structure
/////////////////////////////////////////////////////////////////////////
typedef struct UShort4
{
public:
    uint16_t val[4];

    UShort4();
    UShort4( const uint16_t *pValues );
    UShort4( uint16_t val0, uint16_t val1, uint16_t val2, uint16_t val3 );
    
    operator uint16_t* ();
    operator const uint16_t* () const;

    bool operator == ( const UShort4 &value );
    bool operator != ( const UShort4 &value );
} UShort4;

/////////////////////////////////////////////////////////////////////////
// Short4 structure
/////////////////////////////////////////////////////////////////////////
typedef struct Short4
{
public:
    int16_t val[4];

    Short4();
    Short4( const int16_t *pValues );
    Short4( int16_t val0, int16_t val1, int16_t val2, int16_t val3 );
    
    operator int16_t* ();
    operator const int16_t* () const;

    bool operator == ( const Short4 &value );
    bool operator != ( const Short4 &value );
} Short4;

/////////////////////////////////////////////////////////////////////////
// UByte4 structure
/////////////////////////////////////////////////////////////////////////
typedef struct UByte4
{
public:
    uint8_t val[4];

    UByte4();
    UByte4( const uint8_t *pValues );
    UByte4( uint8_t val0, uint8_t val1, uint8_t val2, uint8_t val3 );

    operator uint8_t* ();
    operator const uint8_t* () const;

    bool operator == ( const UByte4 &value );
    bool operator != ( const UByte4 &value );
} UByte4;

/////////////////////////////////////////////////////////////////////////
// Byte4 structure
/////////////////////////////////////////////////////////////////////////
typedef struct Byte4
{
public:
    int8_t val[4];

    Byte4();
    Byte4( const int8_t *pValues );
    Byte4( int8_t val0, int8_t val1, int8_t val2, int8_t val3 );

    operator int8_t* ();
    operator const int8_t* () const;

    bool operator == ( const Byte4 &value );
    bool operator != ( const Byte4 &value );
} Byte4;

//////////////////////////////////////////////////////////////////////////
// IBone class
//////////////////////////////////////////////////////////////////////////
class IBone
{
    //-------------------------------------------------------------------
    // list of friend classes
    //-------------------------------------------------------------------
    /* NOTHING */

public:
    //-------------------------------------------------------------------
    // public variables
    //-------------------------------------------------------------------
    /* NOTHING */

    //-------------------------------------------------------------------
    // public methods
    //-------------------------------------------------------------------
    virtual void                    Release() = 0;
    virtual std::string             GetName() = 0;
    virtual int32_t                 GetParentIndex() = 0;
    virtual Asura::Math::Matrix		GetBindMatrix() = 0; // オフセット行列
    virtual Asura::Math::Matrix		GetPoseMatrix() = 0; // 姿勢行列

protected:
    //-------------------------------------------------------------------
    // protected variables
    //-------------------------------------------------------------------
    /* NOTHING */

    //-------------------------------------------------------------------
    // protected methods
    //-------------------------------------------------------------------
    /* NOTHING */

private:
    //-------------------------------------------------------------------
    // private variables
    //-------------------------------------------------------------------
    /* NOTHING */

    //-------------------------------------------------------------------
    // private methods
    //-------------------------------------------------------------------
    /* NOTHING */
};


/////////////////////////////////////////////////////////////////////////
// IMaterial class
/////////////////////////////////////////////////////////////////////////
class IMaterial
{
    //-------------------------------------------------------------------
    // list of friend classes
    //-------------------------------------------------------------------
    /* NOTHING */

public:
    //-------------------------------------------------------------------
    // public variables
    //-------------------------------------------------------------------
    /* NOTHING */

    //-------------------------------------------------------------------
    // public methods
    //-------------------------------------------------------------------
    virtual Asura::Math::Vector4  GetDiffuse() = 0;
    virtual Asura::Math::Vector3  GetSpecular() = 0;
    virtual Asura::Math::Vector3  GetEmissive() = 0;
    virtual float                 GetPower() = 0;
    virtual std::string           GetTextureName() = 0;

protected:
    //-------------------------------------------------------------------
    // protected variables
    //-------------------------------------------------------------------
    /* NOTHING */

    //-------------------------------------------------------------------
    // protected methods
    //-------------------------------------------------------------------
    /* NOTHING */

private:
    //-------------------------------------------------------------------
    // private variables
    //-------------------------------------------------------------------
    /* NOTHING */

    //-------------------------------------------------------------------
    // private methods
    //-------------------------------------------------------------------
    /* NOTHING */
};


/////////////////////////////////////////////////////////////////////////
// IMeshSubset class
/////////////////////////////////////////////////////////////////////////
class IMeshSubset
{
    //-------------------------------------------------------------------
    // list of friend classes
    //-------------------------------------------------------------------
    /* NOTHING */

public:
    //-------------------------------------------------------------------
    // public variables
    //-------------------------------------------------------------------
    /* NOTHING */

    //-------------------------------------------------------------------
    // public methods
    //-------------------------------------------------------------------
    virtual uint32_t GetMaterialIndex() = 0;
    virtual uint32_t GetFaceIndex() = 0;
    virtual uint32_t GetNumFace() = 0;

protected:
    //--------------------------------------------------------------------
    // protected variables
    //--------------------------------------------------------------------
    /* NOTHING */

    //--------------------------------------------------------------------
    // protected methods
    //--------------------------------------------------------------------
    /* NOTHING */

private:
    //--------------------------------------------------------------------
    // private variables
    //--------------------------------------------------------------------
    /* NOTHING */

    //--------------------------------------------------------------------
    // private methods
    //--------------------------------------------------------------------
    /* NOTHING */
};


/////////////////////////////////////////////////////////////////////////
// IMesh class
/////////////////////////////////////////////////////////////////////////
class IMesh
{
	//-------------------------------------------------------------------
	// list of friend classes
	//-------------------------------------------------------------------
	/* NOTHING */

public:
	//-------------------------------------------------------------------
	// public variables
	//-------------------------------------------------------------------
	/* NOTHING */

	//-------------------------------------------------------------------
	// public methods
	//-------------------------------------------------------------------
	virtual void                                  Release() = 0;
    virtual std::string                           GetName() = 0;
    virtual std::vector< Asura::Math::Vector3 >   GetPositions() = 0;
    virtual std::vector< Asura::Math::Vector3 >   GetNormals() = 0;
    virtual std::vector< UByte4 >                 GetColors() = 0;
    virtual std::vector< Asura::Math::Vector2 >   GetTexCoords() = 0;
    virtual std::vector< Asura::Math::Vector3 >   GetTangents() = 0;
    virtual std::vector< Asura::Math::Vector3 >   GetBinormals() = 0;
    virtual std::vector< Short4 >                 GetSkinIndices() = 0;
    virtual std::vector< Asura::Math::Vector4 >   GetSkinWeights() = 0;
    virtual std::vector< uint32_t >               GetIndices() = 0;
#if 0 // azarashin modified...
    virtual std::vector< IBone* >                 GetBones() = 0;
#endif
    virtual std::vector< IMeshSubset* >           GetSubsets() = 0;
    virtual std::vector< IMaterial* >             GetMaterials() = 0;
	virtual Asura::Math::Vector3                  GetPosition( uint32_t index ) = 0;
	virtual Asura::Math::Vector3                  GetNormal( uint32_t index ) = 0;
	virtual UByte4                                GetColor( uint32_t index ) = 0;
	virtual Asura::Math::Vector2                  GetTexCoord( uint32_t index ) = 0;
	virtual Asura::Math::Vector3                  GetTangent( uint32_t index ) = 0;
	virtual Asura::Math::Vector3                  GetBinormal( uint32_t index ) = 0;
	virtual Short4                                GetSkinIndex( uint32_t index ) = 0;
	virtual Asura::Math::Vector4                  GetSkinWeight( uint32_t index ) = 0;
	virtual uint32_t                              GetIndex( uint32_t index ) = 0;
#if 0 // azarashin modified...
	virtual IBone*                                GetBone( uint32_t index ) = 0;
#endif
	virtual IMeshSubset*                          GetSubset( uint32_t index ) = 0;
	virtual IMaterial*                            GetMaterial( uint32_t index ) = 0;
	virtual uint32_t                              GetNumPositions() = 0;
	virtual uint32_t                              GetNumNormals() = 0;
	virtual uint32_t                              GetNumColors() = 0;
	virtual uint32_t                              GetNumTexCoords() = 0;
	virtual uint32_t                              GetNumTangents() = 0;
	virtual uint32_t                              GetNumBinormals() = 0;
	virtual uint32_t                              GetNumSkinIndices() = 0;
	virtual uint32_t                              GetNumSkinWeights() = 0;
	virtual uint32_t                              GetNumIndices() = 0;
#if 0 // azarashin modified...
	virtual uint32_t                              GetNumBones() = 0;
#endif
	virtual uint32_t                              GetNumSubsets() = 0;
	virtual uint32_t                              GetNumMaterials() = 0;

#if 1 // azarashin modified...
	virtual void SetRefBone(int ref) = 0; 
	virtual int GetRefBone() = 0; 
#endif

protected:
	//-------------------------------------------------------------------
	// protected variables
	//-------------------------------------------------------------------
	/* NOTHING */

	//-------------------------------------------------------------------
	// protected methods
	//-------------------------------------------------------------------
	/* NOTHING */

private:
	//-------------------------------------------------------------------
	// private variables
	//-------------------------------------------------------------------
	/* NOTHING */

	//-------------------------------------------------------------------
	// private methods
	//-------------------------------------------------------------------
	/* NOTHING */
};

/////////////////////////////////////////////////////////////////////////
// IKeyPose class
/////////////////////////////////////////////////////////////////////////
class IKeyPose
{
    //-------------------------------------------------------------------
    // list of friend classes
    //-------------------------------------------------------------------
    /* NOTHING */

public:
    //-------------------------------------------------------------------
    // public variables
    //-------------------------------------------------------------------
    /* NOTHING */

    //-------------------------------------------------------------------
    // public methods
    //-------------------------------------------------------------------
    virtual uint32_t                GetTime() = 0;
#if 0
    virtual Asura::Math::Vector3    GetScale() = 0;     // Reserved
    virtual Asura::Math::Quaternion GetRotate() = 0;    // Reserved
    virtual Asura::Math::Vector3    GetTranslate() = 0; // Reserved
#endif
    virtual Asura::Math::Matrix     GetTransform() = 0;

protected:
    //-------------------------------------------------------------------
    // protected variables
    //-------------------------------------------------------------------
    /* NOTHING */

    //-------------------------------------------------------------------
    // protected methods
    //-------------------------------------------------------------------
    /* NOTHING */

private:
    //-------------------------------------------------------------------
    // private variables
    //-------------------------------------------------------------------
    /* NOTHING */

    //-------------------------------------------------------------------
    // private methods
    //-------------------------------------------------------------------
    /* NOTHING */
};

//////////////////////////////////////////////////////////////////////////
// IAnimation class
//////////////////////////////////////////////////////////////////////////
class IAnimation
{
    //--------------------------------------------------------------------
    // list of friend classes
    //--------------------------------------------------------------------
    /* NOTHING */

public:
    //--------------------------------------------------------------------
    // public variables
    //--------------------------------------------------------------------
    /* NOTHING */

    //---------------------------------------------------------------------
    // public methods
    //---------------------------------------------------------------------
    virtual std::string GetName() = 0;
    virtual uint32_t    GetBoneIndex() = 0;
    virtual uint32_t    GetNumKeys() = 0;
    virtual IKeyPose*   GetKey( uint32_t index ) = 0;
    virtual std::vector< IKeyPose* > GetKeys() = 0;
    virtual void        Release() = 0;

protected:
    //---------------------------------------------------------------------
    // protected variables
    //---------------------------------------------------------------------
    /* NOTHING */

    //---------------------------------------------------------------------
    // protected methods
    //---------------------------------------------------------------------
    /* NOTHING */

private:
    //---------------------------------------------------------------------
    // private variables
    //---------------------------------------------------------------------
    /* NOTHING */

    //---------------------------------------------------------------------
    // private methods
    //---------------------------------------------------------------------
    /* NOTHING */
};


///////////////////////////////////////////////////////////////////////////
// IAnimationClip class
///////////////////////////////////////////////////////////////////////////
class IAnimationClip
{
    //---------------------------------------------------------------------
    // list of friend classes
    //---------------------------------------------------------------------
    /* NOTHING */

public:
    //---------------------------------------------------------------------
    // public variables
    //---------------------------------------------------------------------
    /* NOTHING */

    //---------------------------------------------------------------------
    // public methods
    //---------------------------------------------------------------------
    virtual void                        Release() = 0;
    virtual std::string                 GetName() = 0;
    virtual IAnimation*                 GetFrame( uint32_t index ) = 0;
    virtual std::vector< IAnimation* >  GetFrames() = 0;
    virtual uint32_t                    GetNumFrames() = 0;
    virtual float                       GetDuration() = 0;
 
protected:
    //---------------------------------------------------------------------
    // protected variables
    //---------------------------------------------------------------------
    /* NOTHING */

    //---------------------------------------------------------------------
    // protected methods
    //---------------------------------------------------------------------
    /* NOTHING */

private:
    //---------------------------------------------------------------------
    // private variables
    //---------------------------------------------------------------------
    /* NOTHING */

    //---------------------------------------------------------------------
    // private methods
    //---------------------------------------------------------------------
    /* NOTHING */
};


///////////////////////////////////////////////////////////////////////////
// IAnimationPlayer class
///////////////////////////////////////////////////////////////////////////
class IAnimationPlayer
{
    //--------------------------------------------------------------------
    // list of friend class
    //--------------------------------------------------------------------
    /* NOTHING */

public:
    //--------------------------------------------------------------------
    // public variables
    //--------------------------------------------------------------------
    /* NOTHING */

    //--------------------------------------------------------------------
    // public methods
    //--------------------------------------------------------------------
    virtual void Release() = 0;	// call delete.
    virtual void SetClip( IAnimationClip* pclip ) = 0;	
    virtual void Update( float time, bool relativeToCurTime, const Asura::Math::Matrix &rootMatrix ) = 0;
    virtual std::vector< Asura::Math::Matrix > GetSkinTransform() = 0;

protected:
    //--------------------------------------------------------------------
    // protected variables
    //--------------------------------------------------------------------
    /* NOTHING */

    //--------------------------------------------------------------------
    // protected methods
    //--------------------------------------------------------------------
    /* NOTHING */
};


/////////////////////////////////////////////////////////////////////////
// IModel class
/////////////////////////////////////////////////////////////////////////
class IModel
{
    //-------------------------------------------------------------------
    // list of friend classes
    //-------------------------------------------------------------------
    /* NOTHING */

public:
    //-------------------------------------------------------------------
    // public variables
    //-------------------------------------------------------------------
    /* NOTHING */

    //-------------------------------------------------------------------
    // public methods
    //-------------------------------------------------------------------
    virtual std::vector< IMesh* >			GetMeshes() = 0;
    virtual std::vector< IAnimationClip* >	GetClips() = 0;
	virtual IMesh*                          GetMesh( uint32_t index ) = 0;
	virtual IAnimationClip*                 GetClip( uint32_t index ) = 0;
	virtual uint32_t                        GetNumMeshes() = 0;
	virtual uint32_t                        GetNumClips() = 0;
	virtual uint32_t						GetNumBones() = 0; 
	virtual std::vector< IBone* >			GetBones() = 0; 
	virtual IBone*							GetBone(uint32_t index) = 0; 
	virtual void                            Release() = 0;	// call delete.

protected:
    //-------------------------------------------------------------------
    // protected variables
    //-------------------------------------------------------------------
    /* NOTHING */

    //-------------------------------------------------------------------
    // protected methods
    //-------------------------------------------------------------------
    /* NOTHING */
};


/////////////////////////////////////////////////////////////////////////
// IModelLoader class
////////////////////////////////////////////////////////////////////////
class IModelLoader
{
    //------------------------------------------------------------------
    // list of friend classes
    //------------------------------------------------------------------
    /* NOTHING */

public:
    //------------------------------------------------------------------
    // public variables
    //------------------------------------------------------------------
    /* NOTHING */

    //------------------------------------------------------------------
    // public methods
    //------------------------------------------------------------------
    virtual bool        Load( const char *filename ) = 0;
    virtual bool        IsLoading() = 0;
    virtual void        Parse() = 0;
    virtual IModel*     GetModel() = 0;
    virtual void        Release() = 0;	// call delete.

protected:
    //-------------------------------------------------------------------
    // protected variables
    //-------------------------------------------------------------------
    /* NOTHING */

    //-------------------------------------------------------------------
    // protected methods
    //-------------------------------------------------------------------
    /* NOTHING */

private:
    //-------------------------------------------------------------------
    // private variables
    //-------------------------------------------------------------------
    /* NOTHING */

    //-------------------------------------------------------------------
    // private methods
    //-------------------------------------------------------------------
    /* NOTHING */

};


/////////////////////////////////////////////////////////////////////////
// ModelLoaderFactory class
/////////////////////////////////////////////////////////////////////////
class ModelLoaderFactory
{
    //------------------------------------------------------------------
    // list of friend classes
    //------------------------------------------------------------------
    /* NOTHING */

public:
    //------------------------------------------------------------------
    // public variables
    //------------------------------------------------------------------
    enum 
    {
        MODEL_TYPE_X,
        NUM_MODEL_TYPE,
    };

    //------------------------------------------------------------------
    // public methods
    //------------------------------------------------------------------
    static IModelLoader* Create( int32_t type, uint32_t token_size = 1024 );

protected:
    //------------------------------------------------------------------
    // protected variables
    //------------------------------------------------------------------
    /* NOTHING */

    //------------------------------------------------------------------
    // protected methods
    //------------------------------------------------------------------
    /* NOTHING */

private:
    //------------------------------------------------------------------
    // private variables
    //------------------------------------------------------------------
    /* NOTHING */

    //------------------------------------------------------------------
    // private methods
    //------------------------------------------------------------------
    /* NOTHING */
};


/////////////////////////////////////////////////////////////////////////
// AnimationPlayerFactory
/////////////////////////////////////////////////////////////////////////
class AnimationPlayerFactory
{
	//-------------------------------------------------------------------
	// list of friend classes
	//-------------------------------------------------------------------
	/* NOTHING */

public:
	//-------------------------------------------------------------------
	// public variables
	//-------------------------------------------------------------------
	/* NOTHING */

	//-------------------------------------------------------------------
	// public methods
	//-------------------------------------------------------------------
	static IAnimationPlayer* Create( std::vector< IBone* > bones );

protected:
	//-------------------------------------------------------------------
	// protected variables
	//-------------------------------------------------------------------
	/* NOTHING */

	//-------------------------------------------------------------------
	// protected methods
	//-------------------------------------------------------------------
	/* NOTHING */

private:
	//-------------------------------------------------------------------
	// private variables
	//-------------------------------------------------------------------
	/* NOTHING */

	//-------------------------------------------------------------------
	// private methods
	//-------------------------------------------------------------------
	/* NOTHING */
};


} // namespace Graphics
} // namespace Asura

#endif //__ASURA_MODEL_H__