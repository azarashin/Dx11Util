#include <DX11Util/Object/Dx11ObjectGUIWebCam.h>
#include <dsound.h>

#define SAFE_RELEASE(x)  { if(x) { (x)->Release(); (x)=NULL; } }



DEFINE_GUID(MEDIASUBTYPE_GREY, 0x59455247, 0x0000, 0x0010, 0x80, 0x00,
    0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_Y8, 0x20203859, 0x0000, 0x0010, 0x80, 0x00,
    0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
DEFINE_GUID(MEDIASUBTYPE_Y800, 0x30303859, 0x0000, 0x0010, 0x80, 0x00, 
    0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

DEFINE_GUID(CLSID_CaptureGraphBuilder2,0xbf87b6e1,0x8c27,0x11d0,0xb3,0xf0,0x00,0xaa,0x00,0x37,0x61,0xc5);
DEFINE_GUID(CLSID_FilterGraph,0xe436ebb3,0x524f,0x11ce,0x9f,0x53,0x00,0x20,0xaf,0x0b,0xa7,0x70);
DEFINE_GUID(CLSID_NullRenderer,0xc1f400a4,0x3f08,0x11d3,0x9f,0x0b,0x00,0x60,0x08,0x03,0x9e,0x37);
DEFINE_GUID(CLSID_SampleGrabber,0xc1f400a0,0x3f08,0x11d3,0x9f,0x0b,0x00,0x60,0x08,0x03,0x9e,0x37);
DEFINE_GUID(CLSID_SystemDeviceEnum,0x62be5d10,0x60eb,0x11d0,0xbd,0x3b,0x00,0xa0,0xc9,0x11,0xce,0x86);
DEFINE_GUID(CLSID_VideoInputDeviceCategory,0x860bb310,0x5d01,0x11d0,0xbd,0x3b,0x00,0xa0,0xc9,0x11,0xce,0x86);
DEFINE_GUID(FORMAT_VideoInfo,0x05589f80,0xc356,0x11ce,0xbf,0x01,0x00,0xaa,0x00,0x55,0x59,0x5a);
DEFINE_GUID(IID_IAMAnalogVideoDecoder,0xc6e13350,0x30ac,0x11d0,0xa1,0x8c,0x00,0xa0,0xc9,0x11,0x89,0x56);
DEFINE_GUID(IID_IAMCameraControl,0xc6e13370,0x30ac,0x11d0,0xa1,0x8c,0x00,0xa0,0xc9,0x11,0x89,0x56);
DEFINE_GUID(IID_IAMCrossbar,0xc6e13380,0x30ac,0x11d0,0xa1,0x8c,0x00,0xa0,0xc9,0x11,0x89,0x56);
DEFINE_GUID(IID_IAMStreamConfig,0xc6e13340,0x30ac,0x11d0,0xa1,0x8c,0x00,0xa0,0xc9,0x11,0x89,0x56);
DEFINE_GUID(IID_IAMVideoProcAmp,0xc6e13360,0x30ac,0x11d0,0xa1,0x8c,0x00,0xa0,0xc9,0x11,0x89,0x56);
DEFINE_GUID(IID_IBaseFilter,0x56a86895,0x0ad4,0x11ce,0xb0,0x3a,0x00,0x20,0xaf,0x0b,0xa7,0x70);
DEFINE_GUID(IID_ICaptureGraphBuilder2,0x93e5a4e0,0x2d50,0x11d2,0xab,0xfa,0x00,0xa0,0xc9,0xc6,0xe3,0x8d);
DEFINE_GUID(IID_ICreateDevEnum,0x29840822,0x5b84,0x11d0,0xbd,0x3b,0x00,0xa0,0xc9,0x11,0xce,0x86);
DEFINE_GUID(IID_IGraphBuilder,0x56a868a9,0x0ad4,0x11ce,0xb0,0x3a,0x00,0x20,0xaf,0x0b,0xa7,0x70);
DEFINE_GUID(IID_IMPEG2PIDMap,0xafb6c2a1,0x2c41,0x11d3,0x8a,0x60,0x00,0x00,0xf8,0x1e,0x0e,0x4a);
DEFINE_GUID(IID_IMediaControl,0x56a868b1,0x0ad4,0x11ce,0xb0,0x3a,0x00,0x20,0xaf,0x0b,0xa7,0x70);
DEFINE_GUID(IID_IMediaFilter,0x56a86899,0x0ad4,0x11ce,0xb0,0x3a,0x00,0x20,0xaf,0x0b,0xa7,0x70);
DEFINE_GUID(IID_ISampleGrabber,0x6b652fff,0x11fe,0x4fce,0x92,0xad,0x02,0x66,0xb5,0xd7,0xc7,0x8f);
DEFINE_GUID(LOOK_UPSTREAM_ONLY,0xac798be0,0x98e3,0x11d1,0xb3,0xf1,0x00,0xaa,0x00,0x37,0x61,0xc5);
DEFINE_GUID(MEDIASUBTYPE_AYUV,0x56555941,0x0000,0x0010,0x80,0x00,0x00,0xaa,0x00,0x38,0x9b,0x71);
DEFINE_GUID(MEDIASUBTYPE_IYUV,0x56555949,0x0000,0x0010,0x80,0x00,0x00,0xaa,0x00,0x38,0x9b,0x71);
DEFINE_GUID(MEDIASUBTYPE_RGB24,0xe436eb7d,0x524f,0x11ce,0x9f,0x53,0x00,0x20,0xaf,0x0b,0xa7,0x70);
DEFINE_GUID(MEDIASUBTYPE_RGB32,0xe436eb7e,0x524f,0x11ce,0x9f,0x53,0x00,0x20,0xaf,0x0b,0xa7,0x70);
DEFINE_GUID(MEDIASUBTYPE_RGB555,0xe436eb7c,0x524f,0x11ce,0x9f,0x53,0x00,0x20,0xaf,0x0b,0xa7,0x70);
DEFINE_GUID(MEDIASUBTYPE_RGB565,0xe436eb7b,0x524f,0x11ce,0x9f,0x53,0x00,0x20,0xaf,0x0b,0xa7,0x70);
DEFINE_GUID(MEDIASUBTYPE_UYVY,0x59565955,0x0000,0x0010,0x80,0x00,0x00,0xaa,0x00,0x38,0x9b,0x71);
DEFINE_GUID(MEDIASUBTYPE_Y211,0x31313259,0x0000,0x0010,0x80,0x00,0x00,0xaa,0x00,0x38,0x9b,0x71);
DEFINE_GUID(MEDIASUBTYPE_Y411,0x31313459,0x0000,0x0010,0x80,0x00,0x00,0xaa,0x00,0x38,0x9b,0x71);
DEFINE_GUID(MEDIASUBTYPE_Y41P,0x50313459,0x0000,0x0010,0x80,0x00,0x00,0xaa,0x00,0x38,0x9b,0x71);
DEFINE_GUID(MEDIASUBTYPE_YUY2,0x32595559,0x0000,0x0010,0x80,0x00,0x00,0xaa,0x00,0x38,0x9b,0x71);
DEFINE_GUID(MEDIASUBTYPE_YUYV,0x56595559,0x0000,0x0010,0x80,0x00,0x00,0xaa,0x00,0x38,0x9b,0x71);
DEFINE_GUID(MEDIASUBTYPE_YV12,0x32315659,0x0000,0x0010,0x80,0x00,0x00,0xaa,0x00,0x38,0x9b,0x71);
DEFINE_GUID(MEDIASUBTYPE_YVU9,0x39555659,0x0000,0x0010,0x80,0x00,0x00,0xaa,0x00,0x38,0x9b,0x71);
DEFINE_GUID(MEDIASUBTYPE_YVYU,0x55595659,0x0000,0x0010,0x80,0x00,0x00,0xaa,0x00,0x38,0x9b,0x71);
DEFINE_GUID(MEDIATYPE_Interleaved,0x73766169,0x0000,0x0010,0x80,0x00,0x00,0xaa,0x00,0x38,0x9b,0x71);
DEFINE_GUID(MEDIATYPE_Video,0x73646976,0x0000,0x0010,0x80,0x00,0x00,0xaa,0x00,0x38,0x9b,0x71);
DEFINE_GUID(PIN_CATEGORY_CAPTURE,0xfb6c4281,0x0353,0x11d1,0x90,0x5f,0x00,0x00,0xc0,0xcc,0x16,0xba);
DEFINE_GUID(PIN_CATEGORY_PREVIEW,0xfb6c4282,0x0353,0x11d1,0x90,0x5f,0x00,0x00,0xc0,0xcc,0x16,0xba);



Dx11ObjectGUIWebCam::Dx11ObjectGUIWebCam()
{
}


Dx11ObjectGUIWebCam::~Dx11ObjectGUIWebCam(void)
{
}



void Dx11ObjectGUIWebCam::Setup(Dx11Context* _context)
{
	LONG width, height; 
	ULONG length; 
	HRESULT hr; 


	hr = CoCreateInstance(CLSID_FilterGraph,
		NULL,
		CLSCTX_INPROC,
		IID_IGraphBuilder,
		(LPVOID *)&pGraphBuilder);


	hr = CoCreateInstance(CLSID_SampleGrabber,
		NULL,
		CLSCTX_INPROC_SERVER,
		IID_IBaseFilter,
		(LPVOID *)&pSampleGrabberFilter);

	hr = pSampleGrabberFilter->QueryInterface(IID_ISampleGrabber,
		(LPVOID *)&pSampleGrabber);

	ZeroMemory(&am_media_type, sizeof(am_media_type));
	am_media_type.majortype = MEDIATYPE_Video;
	am_media_type.subtype = MEDIASUBTYPE_RGB32;
	am_media_type.formattype = FORMAT_VideoInfo;
	hr = pSampleGrabber->SetMediaType(&am_media_type);

	hr = pGraphBuilder->AddFilter(pSampleGrabberFilter,
		L"Sample Grabber");


	ICaptureGraphBuilder2* pCaptureBuilder; 
	hr = CoCreateInstance(CLSID_CaptureGraphBuilder2,
		NULL,
		CLSCTX_INPROC,
		IID_ICaptureGraphBuilder2,
		(LPVOID *)&pCaptureBuilder);
	pCaptureBuilder->SetFiltergraph(pGraphBuilder); 


	ICreateDevEnum* dev_enum; 
	IEnumMoniker* enum_moniker; 
	IBaseFilter* video_device_filter; 
	hr = CoCreateInstance(CLSID_SystemDeviceEnum,
		NULL,
		CLSCTX_INPROC_SERVER,
		IID_ICreateDevEnum,
		(LPVOID *)&dev_enum);


	dev_enum->CreateClassEnumerator(CLSID_VideoInputDeviceCategory, &enum_moniker, 0); 
	if(enum_moniker == 0) {
		dev_enum->Release(); 
		pCaptureBuilder->Release(); 
		pSampleGrabber->Release(); 
		pSampleGrabberFilter->Release(); 
		pGraphBuilder->Release(); 
		return; 
	}

	enum_moniker->Reset(); 

    while(true){
        IMoniker* moniker ;
        DWORD nFetched;
        if(FAILED(enum_moniker->Next(1, &moniker, &nFetched))){
            return;
        }
        if(nFetched<1){
            break;
        }

        // ToDo: 条件に合うデバイスをバインドする
        {
            // 一個目のUSBカメラ
            moniker->BindToObject(0, 0, IID_IBaseFilter, (void**)&video_device_filter);
            break;
        }
    }
	enum_moniker->Release(); 
	
    if(FAILED(pGraphBuilder->AddFilter(video_device_filter, L"Video Input Device"))){
        return;
    }

    // デバイスとグラバフィルタを連結する
    if(FAILED(pCaptureBuilder->RenderStream(&PIN_CATEGORY_PREVIEW,
                    NULL, video_device_filter, NULL, pSampleGrabberFilter))){
        return;
    }


#if 1
	IBaseFilter* audio_device_filter; 
	dev_enum->CreateClassEnumerator(CLSID_AudioInputDeviceCategory, &enum_moniker, 0); 
	if(enum_moniker == 0) {
		dev_enum->Release(); 
		pCaptureBuilder->Release(); 
		pSampleGrabber->Release(); 
		pSampleGrabberFilter->Release(); 
		pGraphBuilder->Release(); 
		return; 
	}

	enum_moniker->Reset(); 

    while(true){
        IMoniker* moniker ;
        DWORD nFetched;
        if(FAILED(enum_moniker->Next(1, &moniker, &nFetched))){
            return;
        }
        if(nFetched<1){
            break;
        }

        // ToDo: 条件に合うデバイスをバインドする
        {
            moniker->BindToObject(0, 0, IID_IBaseFilter, (void**)&audio_device_filter);
            break;
        }
    }
	enum_moniker->Release(); 
	
    if(FAILED(pGraphBuilder->AddFilter(audio_device_filter, L"Audio Input Device"))){
        return;
    }


	IBaseFilter* audio_render_filter; 
	hr = CoCreateInstance(CLSID_AudioRender,
		NULL,
		CLSCTX_INPROC,
		IID_IBaseFilter,
		(LPVOID *)&audio_render_filter);
    if(FAILED(pGraphBuilder->AddFilter(audio_render_filter, L"Audio Render Device"))){
        return;
    }
	

    // デバイスとグラバフィルタを連結する
    if(FAILED(pCaptureBuilder->RenderStream(&PIN_CATEGORY_PREVIEW,
                    NULL, audio_device_filter, NULL, audio_render_filter))){
        return;
    }

#endif

	dev_enum->Release(); 

	
	pSampleGrabber->GetConnectedMediaType(&am_media_type);
	VIDEOINFOHEADER *pVideoInfoHeader =
		(VIDEOINFOHEADER *)am_media_type.pbFormat;

	width = pVideoInfoHeader->bmiHeader.biWidth;
	height = pVideoInfoHeader->bmiHeader.biHeight;
	length = am_media_type.lSampleSize;

	pSampleGrabber->SetBufferSamples(TRUE);

	pGraphBuilder->QueryInterface(IID_IMediaEvent, (LPVOID*)&media_event); 

	SetupCanvas(_context, width, height); 

	// 開始
    pGraphBuilder->QueryInterface(&pMediaControl);
    if(!pMediaControl){
        return;
    }
    if(FAILED(pMediaControl->Run())){
        return;
    }
}


void Dx11ObjectGUIWebCam::GetPicture(char* buf)
{
   long nBufferSize = am_media_type.lSampleSize;
   pSampleGrabber->GetCurrentBuffer(&nBufferSize, (LONG*)buf);

}


void Dx11ObjectGUIWebCam::Term()
{
	pMediaControl->Stop(); 

	TermCanvas(); 

	media_event->Release(); 
	pSampleGrabber->Release();
	pSampleGrabberFilter->Release();
	pGraphBuilder->Release();
}

